{% import 'formalism/macros' as macros %}
{% spaceless %}

{% set defaults = {
    label: 'Label',
    name: '',
    accept: '',
    theme: 'outlined',
    id: 'file' ~ random(5000),
    error: '',
    value: '',
    instructions: '',
    hasError: false,
    isRequired: false,
    isOptional: false,
    isDisabled: false,
    isMultiple: false,
    indicator: {
        isHidden: false,
        required: '*',
        optional: 'optional',
    },
    attributesContainer: {},
    attributesInner: {},
    attributesField: {},
    baseClass: 'f-file'
} %}

{% set self = craft.formalism.deepMerge(defaults, params) %}
{% set bc = self.baseClass %}
{% set hasError = self.error or self.hasError %}
{% set errorClass = hasError ? 'has-error' : '' %}
{% set filledClass = self.value ? 'is-filled' : '' %}
{% set indicator = not self.indicator.isHidden|default(false) ? macros.indicator(self.isRequired ? self.indicator.required|default('*') : null, self.isOptional ? self.indicator.optional|default('optional') : null, bc) %}

{% set attributesContainer = macros.attributes(craft.formalism.deepMerge(self.attributesContainer, {
    class: [[bc, [bc,self.theme]|join('--') ]|join(' '), errorClass, filledClass]|join(' ')|trim,
    'data-field-container': '',
})) %}

{% set attributesInner = macros.attributes(craft.formalism.deepMerge(self.attributesInner, {
    class: bc ~ '__inner',
    for: self.id,
    'data-field-inner': '',
})) %}

{% set instructionId = self.instructions ? self.id ~ '-instructions' : null %}

{% set attributesField = macros.attributes(craft.formalism.deepMerge(self.attributesField, {
    class: [bc ~ '__field', self.attributesField.class|default()]|join(' ')|trim,
    id: self.id,
    name: self.name ~ '[]',
    value: self.value,
    type: 'file',
    accept: self.accept,
    required: self.isRequired ? 'required' : null,
    disabled: self.isDisabled ? 'true' : null,
    multiple: self.isMultiple ? 'true' : null,
    'aria-invalid': hasError ? 'true' : null,
    'aria-describedby': instructionId,
    'data-field': '',
})) %}

<div {{ attributesContainer }}>
    <label {{ attributesInner }}>
        <input {{ attributesField }}>
        {{ macros.label(self.label, bc) }}
        {{ indicator }}
    </label>
    {{ macros.messages(self.error, self.instructions, bc, instructionId) }}
</div>

{% endspaceless %}
